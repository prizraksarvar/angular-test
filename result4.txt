#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <mutex>
#include <thread>
#include <vector>
#include <string>
#include <ctype.h>

std::mutex mtx;
static int counter = 0;
static const int MAX_COUNTER_VAL = 100;

void thread_proc(int tnum) {
	for (;;) {
		{
			std::lock_guard<std::mutex> lock(mtx);
			if (counter == MAX_COUNTER_VAL)
				break;
			int ctr_val = ++counter;
			std::cout << "Thread " << tnum << ": counter = " <<
				ctr_val << std::endl;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
	}
}

int is_letter(char c)
{
	// return isalpha(c);
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= 'а' && c <= 'я') || (c >= 'А' && c <= 'Я') || c == 'ё' || c == 'Ё');
}

void word_counter() {
	std::ifstream fin("ReadMe.txt", std::ios::in | std::ios::_Nocreate);
	std::string buffer;
	char c;
	while (fin.get(c)) {
		if (c<0 || c>255) {
			std::cout << c;
		}
		if (is_letter(c)) {
			buffer += c;
		}
		else {
			std::cout << buffer << std::endl;
			buffer.clear();
		}
	}
}

int main() {
	/*std::string s("string s");
	std::cout << s.c_str() << " " << std::endl;
	std::vector<std::thread> threads;
	for (int i = 0; i < 10; i++) {
		std::thread thr(thread_proc, i);
		threads.emplace_back(std::move(thr));
	}

	// can't use const auto& here since .join() is not marked const
	for (auto& thr : threads) {
		thr.join();
	}
	*/

	word_counter();

	std::cout << "Done!" << std::endl;
	std::cin.get();
	return 0;
}
