// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <stack>
#include <map>

using namespace std;


class TestA {
public:
	TestA() :a(0) {}
	void f2() {
		f1();
	}
private:
	int a;
	void f1() {
		std::cout << "f1 called " << a << std::endl;
	}
};

bool checkBraicers(const string s) {
	int c = 0;
	for (string::const_iterator it = s.begin(); it != s.end(); ++it) {
		if (*it == '(') {
			c++;
		}
		else {
			c--;
		}
		if (c < 0) {
			return false;
		}
	}
	return c == 0;
}

bool checkBraicers2(const string s) {
	std::stack<char> opened;
	char tmp;
	for (string::const_iterator it = s.begin(); it != s.end(); ++it) {
		if (*it == '(' || *it == '[' || *it == '{') {
			opened.push(*it);
			continue;
		}

		if (opened.size() == 0)
			return false;
		tmp = opened.top();
		opened.pop();
		if (*it == ')' && tmp != '('
			|| *it == ']' && tmp != '['
			|| *it == '}' && tmp != '{') {
			return false;
		}
	}
	return opened.size() == 0;
}

int* getPair(const int expectedResult, int *arr, const int size) {
	int i;
	int left = 0;
	int right = size - 1;
	int actualResult;
	std::sort(arr, arr + 8);
	while (left != right) {
		actualResult = arr[left] + arr[right];
		if (actualResult == expectedResult) {
			int r[2];
			r[0] = arr[left];
			r[1] = arr[right];
			return r;
		}
		if (actualResult < expectedResult) {
			left++;
		}
		else {
			right--;
		}
	}
	int r[2];
	r[0] = -1;
	r[1] = -1;
	return r;
}

std::map<int, int> getCountsNumberBad(int* arr, int size) {
	if (size == 0 || arr == 0) {
		return std::map<int, int>();
	}
	std::map<int, int> counts;

	for (int i = 0; i < size; ++i) {
		const auto found = counts.find(arr[i]);
		if (found == counts.cend()) {
			counts.insert(pair<int, int>(arr[i], 1));
		}
		else
		{
			counts[arr[i]]++;
		}
	}

	return counts;
}

std::map<int, int> getCountsNumber(int* arr, int size) {
	if (size == 0 || arr == 0) {
		return std::map<int, int>();
	}
	std::map<int, int> counts;

	int last = -1;
	int c = 0;
	for (int i = 0; i<size; ++i) {
		if (last != arr[i]) {
			if (c > 0) {
				counts.insert(pair<int, int>(last, c));
			}
			last = arr[i];
			c = 1;
		}
		else
		{
			c++;
		}
	}
	if (c > 0) {
		counts.insert(pair<int, int>(last, c));
	}

	return counts;
}

void getMergedAndSorted(const int* arr1, const int size1, const int* arr2, const int size2, int* result) {
	int i1 = 0;
	int i2 = 0;
	while (i1 < size1 || i2 < size2) {
		if (i1 >= size1 || i2 < size2 && arr1[i1]>arr2[i2]) {
			result[i1 + i2] = arr2[i2];
			i2++;
		}
		else {
			result[i1 + i2] = arr1[i1];
			i1++;
		}
	}
}

class Node
{
public:
	int value;
	Node* left;
	Node* right;
};

bool isValidBinarySearchTree(Node* n, int min, int max) {
	if (n == NULL) {
		return true;
	}

	return (*n).value > min && (*n).value < max && isValidBinarySearchTree((*n).left, min, (*n).value) && isValidBinarySearchTree((*n).left, (*n).value, max);
}

bool checkTree(Node* n) {
	return isValidBinarySearchTree(n, INT_MIN, INT_MAX);
}

bool isCanBePolyndrome(string s) {
	string s2(s);
	std::sort(s2.begin(), s2.end());
	int c = 0;
	int cOdd = 0;
	char l = '0';
	for (std::string::iterator it = s2.begin(); it != s2.end(); ++it) {
		if (l != *it || it == s2.end() - 1) {
			if (it == s2.end() - 1) {
				c++;
			}
			cOdd = cOdd + c / 2;
			c = 1;
			l = (*it);
		}
		else {
			c++;
		}
	}
	return s.size() / 2 == cOdd;
}



void rotateMatrix(int* mx, int n) {
	int msize = n / 2 + n % 2;
	int tmp;
	for (int y = 0; y < msize; ++y) {
		for (int x = y; x < n - 1 - y; ++x) {
			tmp = mx[y * n + x];
			mx[y * n + x] = mx[(n - 1 - y - x) * n + y];
			mx[(n - 1 - y - x) * n + y] = mx[(n - 1 - y) * n + (n - 1 - x)];
			mx[(n - 1 - y) * n + (n - 1 - x)] = mx[(x)* n + (n - 1 - y)];
			mx[(x)* n + (n - 1 - y)] = tmp;
		}
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	/*TestA testA;
	testA.f2();
	TestA* test = new TestA();
	test->f2();

	string s1("((()))(())");
	std::cout << s1 << " " << checkBraicers(s1) << std::endl;

	s1 = "((()))(()))";
	std::cout << s1 << " " << checkBraicers(s1) << std::endl;

	s1 = "([{()}])[({})]";
	std::cout << s1 << " " << checkBraicers2(s1) << std::endl;

	s1 = "([{([)}])[({]})]";
	std::cout << s1 << " " << checkBraicers2(s1) << std::endl;

	int arr[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int* r = getPair(14, arr, 10);
	std::cout << arr << " = " << r[0] << "+" << r[1] << std::endl;*/

	/*int arr2[] = { 0, 0, 1, 1, 1, 4, 5, 6, 6, 8, 9, 9 };
	std::map<int, int> r2 = getCountsNumber(arr2, 12);
	std::cout << "res: " << std::endl;
	for (std::map<int, int>::iterator it2 = r2.begin(); it2 != r2.end(); ++it2) {
	std::cout << it2->first << " - " << it2->second << endl;
	}*/

	/*int s31 = 12;
	int s32 = 11;
	int arr31[12] = { 0, 0, 1, 1, 1, 4, 5, 6, 6, 8, 9, 9 };
	int arr32[11] = { 0, 1, 2, 4, 4, 5, 6, 6, 8, 9, 9 };
	int* r3 = new int[s31 + s32];
	getMergedAndSorted(arr31, s31, arr32, s32, r3);
	std::cout << "res: " << std::endl;
	for (int it3 = 0; it3 < s31 + s32; ++it3) {
		std::cout << r3[it3] << endl;
	}*/

	/*string s("abcdcba");
	std::cout << s << " - " << isCanBePolyndrome(s) << endl;
	s = "abcddcba";
	std::cout << s << " - " << isCanBePolyndrome(s) << endl;
	s = "abcdacba";
	std::cout << s << " - " << isCanBePolyndrome(s) << endl;*/

	/*int n = 6;
	int matrix[36] = {
		1, 2, 3, 4, 5, 6,
		1, 2, 3, 4, 5, 6,
		1, 2, 3, 4, 5, 6,
		1, 2, 3, 4, 5, 6,
		1, 2, 3, 4, 5, 6,
		1, 2, 3, 4, 5, 6,
	};*/

	int n = 5;
	int matrix[25] = {
		1, 2, 3, 4, 5,
		1, 2, 3, 4, 5,
		1, 2, 3, 4, 5,
		1, 2, 3, 4, 5,
		1, 2, 3, 4, 5,
	};

	/*int n = 4;
	int matrix[16] = {
		1, 2, 3, 4,
		1, 2, 3, 4,
		1, 2, 3, 4,
		1, 2, 3, 4,
	};*/

	for (int y = 0; y < n; ++y) {
		for (int x = 0; x < n; ++x) {
			std::cout << matrix[y * n + x] << " ";
		}
		std::cout << endl;
	}

	std::cout << endl;
	std::cout << endl;

	rotateMatrix(matrix, n);

	for (int y = 0; y < n; ++y) {
		for (int x = 0; x < n; ++x) {
			std::cout << matrix[y * n + x] << " ";
		}
		std::cout << endl;
	}

	/*
	std::vector<std::string> dictionary = { "obscene",
	"obscenity",
	"alphabet",
	"row",
	"column",
	"rowboat" };
	std::sort(dictionary.begin(), dictionary.end());
	std::cout << "Sorted by < operator: \n";
	for (auto str : dictionary)
	std::cout << str << "\n";
	*/
	cin.get();
	return 0;
}


