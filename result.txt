From 03e3c5ab43d4b081f5d6668c36999fcb45d2298a Mon Sep 17 00:00:00 2001
From: sarkh <sarkhas@mail.ru>
Date: Sun, 19 May 2019 23:30:51 +0500
Subject: [PATCH 2/3] PWA app made

---
 frontend/angular.json             |  7 ++-
 frontend/src/assets/install.js    | 65 ++++++++++++++++++++++
 frontend/src/assets/manifest.json | 53 ++++++++++++++++++
 frontend/src/index.html           |  4 +-
 frontend/src/service-worker.js    | 89 +++++++++++++++++++++++++++++++
 5 files changed, 215 insertions(+), 3 deletions(-)
 create mode 100644 frontend/src/assets/install.js
 create mode 100644 frontend/src/assets/manifest.json
 create mode 100644 frontend/src/service-worker.js

diff --git a/frontend/angular.json b/frontend/angular.json
index b781038..86a2c5c 100644
--- a/frontend/angular.json
+++ b/frontend/angular.json
@@ -24,13 +24,16 @@
             "tsConfig": "src/tsconfig.app.json",
             "assets": [
               "src/favicon.ico",
+              "src/service-worker.js",
               "src/assets"
             ],
             "styles": [
               "src/styles.css",
               "node_modules/bootstrap/dist/css/bootstrap.min.css"
             ],
-            "scripts": [],
+            "scripts": [
+              "src/assets/install.js"
+            ],
             "es5BrowserSupport": true
           },
           "configurations": {
@@ -266,4 +269,4 @@
     }
   },
   "defaultProject": "angular-admin"
-}
\ No newline at end of file
+}
diff --git a/frontend/src/assets/install.js b/frontend/src/assets/install.js
new file mode 100644
index 0000000..a7fc8f4
--- /dev/null
+++ b/frontend/src/assets/install.js
@@ -0,0 +1,65 @@
+
+
+setTimeout((function () {
+  let deferredPrompt;
+
+  console.log(2);
+
+  let installModal = document.getElementById("installModal");
+  let installButton = document.getElementById("installButton");
+
+  function showModal() {
+    installModal.style.display = 'block';
+    installModal.style.opacity = 1;
+  }
+
+  function hideModal() {
+    installModal.style.display = 'none';
+    installModal.style.opacity = 0;
+  }
+
+  window.addEventListener('beforeinstallprompt', (e) => {
+    // Prevent Chrome 67 and earlier from automatically showing the prompt
+    e.preventDefault();
+    // Stash the event so it can be triggered later.
+    deferredPrompt = e;
+
+    console.log(3);
+    // Update UI notify the user they can add to home screen
+    //btnAdd.style.display = 'block';
+    showModal();
+  });
+
+  installButton.addEventListener('click', (e) => {
+    hideModal();
+    // Show the prompt
+    deferredPrompt.prompt();
+    // Wait for the user to respond to the prompt
+    deferredPrompt.userChoice
+      .then((choiceResult) => {
+        if (choiceResult.outcome === 'accepted') {
+          console.log('User accepted the A2HS prompt');
+        } else {
+          console.log('User dismissed the A2HS prompt');
+        }
+        deferredPrompt = null;
+      });
+  });
+}),2000);
+
+if ('serviceWorker' in navigator) {
+  navigator.serviceWorker.register('/service-worker.js', { scope: '/' }).then(function(reg) {
+
+    if(reg.installing) {
+      console.log('Service worker installing');
+    } else if(reg.waiting) {
+      console.log('Service worker installed');
+    } else if(reg.active) {
+      console.log('Service worker active');
+    }
+
+  }).catch(function(error) {
+    // registration failed
+    console.log('Registration failed with ' + error);
+  });
+}
diff --git a/frontend/src/assets/manifest.json b/frontend/src/assets/manifest.json
new file mode 100644
index 0000000..6227df0
--- /dev/null
+++ b/frontend/src/assets/manifest.json
@@ -0,0 +1,53 @@
+{
+  "name": "Angular Admin",
+  "short_name": "angular admin",
+  "theme_color": "#2196f3",
+  "background_color": "#2196f3",
+  "display": "fullscreen",
+  "orientation": "portrait",
+  "Scope": "/",
+  "start_url": "/animtest",
+  "icons": [
+    {
+      "src": "images/icons/icon-72x72.png",
+      "sizes": "72x72",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-96x96.png",
+      "sizes": "96x96",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-128x128.png",
+      "sizes": "128x128",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-144x144.png",
+      "sizes": "144x144",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-152x152.png",
+      "sizes": "152x152",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-192x192.png",
+      "sizes": "192x192",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-384x384.png",
+      "sizes": "384x384",
+      "type": "image/png"
+    },
+    {
+      "src": "images/icons/icon-512x512.png",
+      "sizes": "512x512",
+      "type": "image/png"
+    }
+  ],
+  "splash_pages": null
+}
diff --git a/frontend/src/index.html b/frontend/src/index.html
index 5954205..46ff0a6 100644
--- a/frontend/src/index.html
+++ b/frontend/src/index.html
@@ -4,13 +4,15 @@
   <meta charset="utf-8">
   <title>AngularAdmin</title>
   <base href="/">
-
+  <meta name="theme-color" content="#007bff">
   <meta name="viewport" content="width=device-width, initial-scale=1">
+  <link rel="manifest" href="assets/manifest.json">
   <link rel="icon" type="image/x-icon" href="favicon.ico">
   <link href="https://fonts.googleapis.com/css?family=Titillium+Web" rel="stylesheet">
   <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
 </head>
 <body class="igx-typography">
   <app-root></app-root>
+  <noscript>Для работы сайта требуется включенный JavaScript, пожалуйста включите работу скриптов</noscript>
 </body>
 </html>
diff --git a/frontend/src/service-worker.js b/frontend/src/service-worker.js
new file mode 100644
index 0000000..1080fb2
--- /dev/null
+++ b/frontend/src/service-worker.js
@@ -0,0 +1,89 @@
+//importScripts('/cache-polyfill.js');
+
+const CACHE_NAME = 'v0.0.1';
+// Listen for install event, set callback
+self.addEventListener('install', function(event) {
+  console.log('install',event);
+  event.waitUntil(
+    caches.open(CACHE_NAME).then(function(cache) {
+      return cache.addAll([
+        '/',
+        '/animtest',
+        '/vendor.js',
+        '/styles.js',
+        '/scripts.js',
+        '/runtime.js',
+        '/polyfills.js',
+        '/main.js',
+        '/index.html',
+        '/es2015-polyfills.js',
+        '/service-worker.js',
+        '/assets/service-worker.js',
+        '/assets/install.js',
+        '/assets/manifest.json',
+        '/assets/avatar-neytiri.jpg'
+      ]).then(() => self.skipWaiting());
+    })
+  );
+});
+
+self.addEventListener('activate', event => {
+  console.log("activate",event);
+  event.waitUntil(self.clients.claim());
+});
+
+self.addEventListener('fetch', event => {
+  console.log(event.request.url);
+  event.respondWith(
+    caches.open(CACHE_NAME)
+      .then(cache => cache.match(event.request, {ignoreSearch: true}))
+      .then(response => {
+        return response || fetch(event.request);
+      })
+  );
+});
+
+/*self.addEventListener('fetch', (event) => {
+    console.log('fetch',event);
+    if (event.request.method === 'GET') {
+        event.respondWith(
+            caches.match(event.request)
+                .then((cached) => {
+                    var networked = fetch(event.request)
+                        .then((response) => {
+                            let cacheCopy = response.clone()
+                            caches.open(CACHE_NAME)
+                                .then(cache => cache.put(event.request, cacheCopy))
+                            return response;
+                        })
+                        .catch(() => caches.match(offlinePage));
+                    return cached || networked;
+                })
+        )
+    }
+    return;
+});*/
+
+/*self.addEventListener('fetch', function(event) {
+    event.respondWith(caches.match(event.request).then(function(response) {
+        // caches.match() always resolves
+        // but in case of success response will have value
+        if (response !== undefined) {
+            return response;
+        } else {
+            return fetch(event.request).then(function (response) {
+                // response may be used only once
+                // we need to save clone to put one copy in cache
+                // and serve second one
+                let responseClone = response.clone();
+
+                caches.open('v1').then(function (cache) {
+                    cache.put(event.request, responseClone);
+                });
+                return response;
+            }).catch(function () {
+                return caches.match('/index.html');
+            });
+        }
+    }));
+});*/
-- 
2.19.1.windows.1

__FILES_SPLITTER__
